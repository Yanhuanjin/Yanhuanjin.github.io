<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>用Python行云流水地操作Excel和数据库</title>
      <link href="2021/02/10/yong-python-xing-yun-liu-shui-di-cao-zuo-excel-he-shu-ju-ku/"/>
      <url>2021/02/10/yong-python-xing-yun-liu-shui-di-cao-zuo-excel-he-shu-ju-ku/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本想就着这个机会学习下Java读取Excel的，奈何搜了一圈，发现还是Pandas最为简单明了。打算先就Python写一版，后面在学习时可能还会发一篇《用Java优雅地操作Excel和数据库》。</p><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><h3 id="软件包"><a href="#软件包" class="headerlink" title="软件包"></a>软件包</h3><p>关于软件安装和环境配置，网上有成堆的教程，此处不再赘述。<br>大体上需要用到的软件就以下几款：</p><ol><li>Anaconda（建议用Anaconda里的jupyter notebook，如果喜欢PyCharm也可以，当然也可以只用Python）</li><li>Python（Anaconda和PyCharm都内置，如果只有Python也可）</li><li>MySQL（不多说了，免费）</li></ol><h3 id="数据"><a href="#数据" class="headerlink" title="数据"></a>数据</h3><p>数据只要随便找一个Excel文件，自己建一个Excel文档（不论是.xls还是.xlsx后缀都可以），并随便写一些内容，保存为 成绩单.xlsx。<br><img src="https://img2020.cnblogs.com/blog/1732977/202102/1732977-20210223145746228-817664678.png"></p><h2 id="Pandas读取Excel文件"><a href="#Pandas读取Excel文件" class="headerlink" title="Pandas读取Excel文件"></a>Pandas读取Excel文件</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd  <span class="token comment" spellcheck="true"># 如果没有安装pandas报错，直接在jupyter里面运行后述语句 !pip install pandas</span>df <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_excel<span class="token punctuation">(</span>r<span class="token string">"C:\Users\Administrator\Desktop\成绩单.xlsx"</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 读取test.xlsx的sheet1，并以第一行作为Dataframe的标题头</span>df<span class="token punctuation">.</span>head<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 查看表格内容概况</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="https://img2020.cnblogs.com/blog/1732977/202102/1732977-20210223150112070-1829265715.png"></p><h2 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h2><p>打开MySQL，创建数据库students</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 创建数据库</span>create database students<span class="token punctuation">;</span><span class="token comment" spellcheck="true"># 使用数据库</span>use database<span class="token punctuation">;</span><span class="token comment" spellcheck="true"># 查看数据表，这个时候是空数据库</span>show tables<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="创建数据表"><a href="#创建数据表" class="headerlink" title="创建数据表"></a>创建数据表</h2><pre class="line-numbers language-python"><code class="language-python">create table `students` <span class="token punctuation">(</span>`id` int <span class="token operator">not</span> null auto_increment primary key<span class="token punctuation">,</span> `student_id` varchar<span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> comment <span class="token string">'学号'</span><span class="token punctuation">,</span> `name` varchar<span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> comment <span class="token string">'姓名'</span><span class="token punctuation">,</span> `results` int comment <span class="token string">'成绩'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>注：创建数据表有两种方式，一种是在MySQL中先创建好数据表，并定义好数据字段的名称、属性，然后再用Pandas进行导入，若属性不符则导入失败；另一种是直接用Pandas在导出的同时创建数据表，这样导出的数据表字段属性都为TEXT，然后根据需要更改数据字段属性。</p><h2 id="将记录导入数据库"><a href="#将记录导入数据库" class="headerlink" title="将记录导入数据库"></a>将记录导入数据库</h2><p>调用Pandas.io.sql.to_sql()方法，其中if_exists控制重复记录是替换还是追加。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> sqlalchemy <span class="token keyword">import</span> create_engine<span class="token comment" spellcheck="true"># 建立连接，username替换为用户名，passwd替换为密码，students替换为数据库名</span>conn <span class="token operator">=</span> create_engine<span class="token punctuation">(</span><span class="token string">'mysql+pymysql://username:passwd@localhost:3306/students'</span><span class="token punctuation">,</span>encoding<span class="token operator">=</span><span class="token string">'utf8'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 以df中的header为标题，写入数据库，test替换为数据表名</span>pd<span class="token punctuation">.</span>io<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>to_sql<span class="token punctuation">(</span>df<span class="token punctuation">,</span> <span class="token string">"students"</span><span class="token punctuation">,</span> conn<span class="token punctuation">,</span> if_exists<span class="token operator">=</span><span class="token string">'append'</span><span class="token punctuation">,</span> index<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>一般这时候会报错，因为Pandas里面的字段名称和数据库里的字段名称不一致<br><img src="https://img2020.cnblogs.com/blog/1732977/202102/1732977-20210223151434406-1886367206.png"><br>修改df里面的标题(几种重命名的方式汇总 <a href="https://blog.csdn.net/littleRpl/article/details/100117428">https://blog.csdn.net/littleRpl/article/details/100117428</a>)</p><pre class="line-numbers language-python"><code class="language-python">df<span class="token punctuation">.</span>rename<span class="token punctuation">(</span>columns<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">'学号'</span><span class="token punctuation">:</span><span class="token string">'student_id'</span><span class="token punctuation">,</span>                  <span class="token string">'姓名'</span><span class="token punctuation">:</span><span class="token string">'name'</span><span class="token punctuation">,</span>                  <span class="token string">'成绩'</span><span class="token punctuation">:</span><span class="token string">'results'</span><span class="token punctuation">}</span><span class="token punctuation">,</span>inplace<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="https://img2020.cnblogs.com/blog/1732977/202102/1732977-20210223152118608-739948014.png"><br>再次尝试写入，成功。我们直接查询student数据表</p><p><img src="https://img2020.cnblogs.com/blog/1732977/202102/1732977-20210223152237074-211751201.png"></p><h2 id="使用PyMySQL连接数据库进行增删改查"><a href="#使用PyMySQL连接数据库进行增删改查" class="headerlink" title="使用PyMySQL连接数据库进行增删改查"></a>使用PyMySQL连接数据库进行增删改查</h2><h3 id="连接数据库"><a href="#连接数据库" class="headerlink" title="连接数据库"></a>连接数据库</h3><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> pymysqldb <span class="token operator">=</span> pymysql<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>host<span class="token operator">=</span><span class="token string">"127.0.0.1"</span><span class="token punctuation">,</span> user<span class="token operator">=</span><span class="token string">"root"</span><span class="token punctuation">,</span> database<span class="token operator">=</span><span class="token string">"students"</span><span class="token punctuation">,</span> passwd<span class="token operator">=</span><span class="token string">"root"</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 主机名，用户名，数据库名称，密码</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="查询操作"><a href="#查询操作" class="headerlink" title="查询操作"></a>查询操作</h3><pre class="line-numbers language-python"><code class="language-python">cursor <span class="token operator">=</span> db<span class="token punctuation">.</span>cursor<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 编写查询语句</span>sql <span class="token operator">=</span> <span class="token string">"SELECT * FROM test;"</span><span class="token comment" spellcheck="true"># 执行查询语句</span>cursor<span class="token punctuation">.</span>execute<span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 获取查询结果</span>result <span class="token operator">=</span> cursor<span class="token punctuation">.</span>fetchall<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到返回的是一个二维元组<br><img src="https://img2020.cnblogs.com/blog/1732977/202102/1732977-20210223152514719-749272091.png"></p><h3 id="增删改操作"><a href="#增删改操作" class="headerlink" title="增删改操作"></a>增删改操作</h3><h4 id="新增记录"><a href="#新增记录" class="headerlink" title="新增记录"></a>新增记录</h4><pre class="line-numbers language-python"><code class="language-python">insert_sql <span class="token operator">=</span> <span class="token string">"INSERT INTO students (student_id, name, results) values ('Y031', 'Jack', 99);"</span>cursor<span class="token punctuation">.</span>execute<span class="token punctuation">(</span>insert_sql<span class="token punctuation">)</span>db<span class="token punctuation">.</span>commit<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="https://img2020.cnblogs.com/blog/1732977/202102/1732977-20210223152708014-215538333.png"></p><h4 id="更新记录"><a href="#更新记录" class="headerlink" title="更新记录"></a>更新记录</h4><pre class="line-numbers language-python"><code class="language-python">update_sql <span class="token operator">=</span> <span class="token string">"update students set student_id='Y006' where student_id='Y031';"</span>cursor<span class="token punctuation">.</span>execute<span class="token punctuation">(</span>update_sql<span class="token punctuation">)</span>db<span class="token punctuation">.</span>commit<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="https://img2020.cnblogs.com/blog/1732977/202102/1732977-20210223153035965-720667188.png"></p><h4 id="删除记录（不建议，一般使用逻辑删除，即新增一个is-delete字段，然后update这个字段）"><a href="#删除记录（不建议，一般使用逻辑删除，即新增一个is-delete字段，然后update这个字段）" class="headerlink" title="删除记录（不建议，一般使用逻辑删除，即新增一个is_delete字段，然后update这个字段）"></a>删除记录（不建议，一般使用逻辑删除，即新增一个is_delete字段，然后update这个字段）</h4><p>同样的也是套用上面的模板进行操作，读者可以自行尝试。<br>这里稍微讲一下逻辑删除的原理，由于我进行了一次物理删除，导致自增id跳过6到了7.<br>如果是逻辑删除，先修改表结构新增is_delete字段<br><img src="https://img2020.cnblogs.com/blog/1732977/202102/1732977-20210223153447453-716462397.png"><br>更新指定主键的记录的is_delete属性为1，查询的时候加上限定条件。<br><img src="https://img2020.cnblogs.com/blog/1732977/202102/1732977-20210223153555559-1804198156.png"></p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>通过Python操作数据库和Excel文件，以Pandas为桥梁，就可以快速进行Excel数据分析，Pandas数据处理，MySQL数据库存储，实现全流程自动化操作。通过数据库连接Web开发组件，Pandas连接机器学习，Excel导出统计报表，实现一站式编程。</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从零开始Django搭建Python Web项目</title>
      <link href="2020/11/10/cong-ling-kai-shi-da-jian-django-xiang-mu/"/>
      <url>2020/11/10/cong-ling-kai-shi-da-jian-django-xiang-mu/</url>
      
        <content type="html"><![CDATA[<h1 id="从零开始：Django搭建Web"><a href="#从零开始：Django搭建Web" class="headerlink" title="从零开始：Django搭建Web"></a>从零开始：Django搭建Web</h1><p>Created: Oct 29, 2020 10:39 AM<br>Updated: Nov 10, 2020 2:01 PM</p><ol><li><p>在任意存储位置，新建文件夹，例如DjangoTest。</p><p> <img src="/2020/11/10/cong-ling-kai-shi-da-jian-django-xiang-mu/%E5%88%9B%E5%BB%BA%E6%96%87%E4%BB%B6%E5%A4%B9.png" alt="创建文件夹"></p></li><li><p>在资源管理器地址栏键入cmd，进入命令行界面（对，直接在这里键入cmd）。</p><p> <img src="/2020/11/10/cong-ling-kai-shi-da-jian-django-xiang-mu/%E6%89%93%E5%BC%80%E5%91%BD%E4%BB%A4%E8%A1%8C.png" alt="打开命令行"></p></li><li><p>创建虚拟环境</p><p> 这里环境名称我用test。</p><pre class="line-numbers language-python"><code class="language-python">python <span class="token operator">-</span>m venv test<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>激活虚拟环境</p><pre class="line-numbers language-python"><code class="language-python">test\Scripts\activate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p> 可以看到前面多了一个括号，括号内时虚拟环境的名称</p><p> <img src="/2020/11/10/cong-ling-kai-shi-da-jian-django-xiang-mu/%E6%BF%80%E6%B4%BB%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83.png" alt="激活虚拟环境"></p></li><li><p>使用pip安装Django</p><pre class="line-numbers language-python"><code class="language-python">pip install Django<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>在Django中创建项目</p><p> 使用PyCharm打开DjangoTest文件夹，在Terminal窗口中输入</p><pre class="line-numbers language-python"><code class="language-python">django<span class="token operator">-</span>admin<span class="token punctuation">.</span>py startproject my_blog <span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>创建数据库</p><pre class="line-numbers language-python"><code class="language-python">python manage<span class="token punctuation">.</span>py migrate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>启动服务器</p><pre class="line-numbers language-python"><code class="language-python">python manage<span class="token punctuation">.</span>py runserver<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><p>完毕。</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot注解说明@RequestMapping</title>
      <link href="2020/11/03/java-zhu-jie-requestmapping/"/>
      <url>2020/11/03/java-zhu-jie-requestmapping/</url>
      
        <content type="html"><![CDATA[<blockquote><p><strong>@RequestMapping注解可以将HTTP请求映射给控制器controller来处理，包括返回视图页面的controller和Rest服务的controller。是一个非常常用的注解。</strong></p></blockquote><p>在 Spring MVC 应用程序中，RequestDispatcher (在 Front Controller 之下) 这个 servlet 负责将进入的 HTTP 请求路由到控制器的处理方法。在对 Spring MVC 进行的配置的时候, 需要指定请求与处理方法之间的映射关系。如下图：</p><p><img src="https://img-blog.csdnimg.cn/20181219193206597" alt="img"></p><p>要配置 Web 请求的映射，就需要你用上 @RequestMapping 注解。@RequestMapping 注解可以在控制器类的级别和/或其中的方法的级别上使用。在类的级别上的注解会将一个特定请求或者请求模式映射到一个控制器之上。之后你还可以另外添加方法级别的注解来进一步指定到处理方法的映射关系。下面是一个同时在类和方法上应用了 @RequestMapping 注解的示例：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@RestController</span>  <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/home"</span><span class="token punctuation">)</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">IndexController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span>          String <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//mapped to hostname:port/home/ </span>        <span class="token keyword">return</span> <span class="token string">"Hello from get"</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>         <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/index"</span><span class="token punctuation">)</span>    String <span class="token function">index</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//mapped to hostname:port/home/index/</span>        <span class="token keyword">return</span> <span class="token string">"Hello from index"</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如上述代码所示，到 /home 的请求会由 get() 方法来处理，而到 /home/index 的请求会由 index() 来处理。</p><p><strong>@RequestMapping 来处理多个 URI</strong></p><p>你可以将多个请求映射到一个方法上去，只需要添加一个带有请求路径值列表的 @RequestMapping 注解就行了。</p><pre class="line-numbers language-Java"><code class="language-Java">@RestController  @RequestMapping("/home")  public class IndexController {            @RequestMapping(value = {                  "",         "/page",           "page*",           "view/*,**/msg"    })         String indexMultipleMapping() {                return "Hello from index multiple mapping.";       } }  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>带有 @RequestParam 的 @RequestMapping</strong></p><p>@RequestParam 注解配合 @RequestMapping 一起使用，可以将请求的参数同处理方法的参数绑定在一起。@RequestParam 注解使用的时候可以有一个值，也可以没有值。这个值指定了需要被映射到处理方法参数的请求参数, 代码如下所示：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@RestController</span>  <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/home"</span><span class="token punctuation">)</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">IndexController</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/id"</span><span class="token punctuation">)</span>          String <span class="token function">getIdByValue</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> String personId<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"ID is "</span> <span class="token operator">+</span> personId<span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token keyword">return</span> <span class="token string">"Get ID from query string of URL with value element"</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>          <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/personId"</span><span class="token punctuation">)</span> String <span class="token function">getId</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span> String personId<span class="token punctuation">)</span> <span class="token punctuation">{</span>       # 如果请求参数和处理方法参数的名称一样的话，<span class="token annotation punctuation">@RequestParam</span> 注解的value 这个参数就可省掉             System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"ID is "</span> <span class="token operator">+</span> personId<span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token keyword">return</span> <span class="token string">"Get ID from query string of URL without value element"</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>@RequestParam 注解的 required 这个参数定义了参数值是否是必须要传的。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@RestController</span> <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/home"</span><span class="token punctuation">)</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">IndexController</span> <span class="token punctuation">{</span>          <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/name"</span><span class="token punctuation">)</span>          String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"person"</span><span class="token punctuation">,</span> required <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span> String personName<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"Required element of request param"</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>由于required被指定为false，故对于getName()方法来说，对于如下两个url均会处理：</p><p>/home/name?person=xyz<br>/home/name</p><p>@RequestParam 的 defaultValue 取值就是用来给取值为空的请求参数提供一个默认值的。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@RestController</span>  <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/home"</span><span class="token punctuation">)</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">IndexController</span> <span class="token punctuation">{</span>          <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/name"</span><span class="token punctuation">)</span>    String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span>value<span class="token operator">=</span><span class="token string">"person"</span><span class="token punctuation">,</span> defaultValue <span class="token operator">=</span><span class="token string">"John"</span><span class="token punctuation">)</span> String personName<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">return</span> <span class="token string">"Required element of request param"</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>若请求中没有”person=”的参数，那么getName()处理方法就会接受John这个默认值作为其参数。</p><p><strong>用 @RequestMapping 处理 HTTP 的各种方法</strong></p><p>Spring MVC 的 @RequestMapping 注解能够处理 HTTP 请求的方法, 比如 GET, PUT, POST, DELETE 以及 PATCH。所有的请求默认都会是 HTTP GET 类型的。为了能将一个请求映射到一个特定的 HTTP 方法，你需要在 @RequestMapping 中使用 method 来声明 HTTP 请求所使用的方法类型，如下所示：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@RestController</span>  <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/home"</span><span class="token punctuation">)</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">IndexController</span> <span class="token punctuation">{</span>          <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>method <span class="token operator">=</span> RequestMethod<span class="token punctuation">.</span>GET<span class="token punctuation">)</span>          String <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                  <span class="token keyword">return</span> <span class="token string">"Hello from get"</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>          <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>method <span class="token operator">=</span> RequestMethod<span class="token punctuation">.</span>DELETE<span class="token punctuation">)</span>    String <span class="token function">delete</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                 <span class="token keyword">return</span> <span class="token string">"Hello from delete"</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>          <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>method <span class="token operator">=</span> RequestMethod<span class="token punctuation">.</span>POST<span class="token punctuation">)</span>          String <span class="token function">post</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                  <span class="token keyword">return</span> <span class="token string">"Hello from post"</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>          <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>method <span class="token operator">=</span> RequestMethod<span class="token punctuation">.</span>PUT<span class="token punctuation">)</span>          String <span class="token function">put</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                  <span class="token keyword">return</span> <span class="token string">"Hello from put"</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>          <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>method <span class="token operator">=</span> RequestMethod<span class="token punctuation">.</span>PATCH<span class="token punctuation">)</span>          String <span class="token function">patch</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                  <span class="token keyword">return</span> <span class="token string">"Hello from patch"</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在上述这段代码中， @RequestMapping 注解中的 method 元素声明了 HTTP 请求的 HTTP 方法的类型。所有的处理处理方法会处理从这同一个 URL( /home)进来的请求, 但要看指定的 HTTP 方法是什么来决定用哪个方法来处理。例如，一个 POST 类型的请求 /home 会交给 post() 方法来处理，而一个 DELETE 类型的请求 /home 则会由 delete() 方法来处理。你会看到 Spring MVC 将使用这样相同的逻辑来映射其它的方法。</p><p><strong>用 @RequestMapping 来处理生产和消费对象</strong></p><p>可以使用 @RequestMapping 注解的 produces 和 consumes 这两个元素来缩小请求映射类型的范围。为了能用请求的媒体类型来产生对象, 你要用到 @RequestMapping 的 produces 元素再结合着 @ResponseBody 注解。你也可以利用 @RequestMapping 的 comsumes 元素再结合着 @RequestBody 注解用请求的媒体类型来消费对象。下面这段代码就用到的 @RequestMapping 的生产和消费对象元素：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@RestController</span>  <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/home"</span><span class="token punctuation">)</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">IndexController</span> <span class="token punctuation">{</span>          <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/prod"</span><span class="token punctuation">,</span> produces <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"application/JSON"</span><span class="token punctuation">}</span><span class="token punctuation">)</span>          <span class="token annotation punctuation">@ResponseBody</span>          String <span class="token function">getProduces</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                  <span class="token keyword">return</span> <span class="token string">"Produces attribute"</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>            <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/cons"</span><span class="token punctuation">,</span> consumes <span class="token operator">=</span> <span class="token punctuation">{</span>                  <span class="token string">"application/JSON"</span><span class="token punctuation">,</span>                  <span class="token string">"application/XML"</span>          <span class="token punctuation">}</span><span class="token punctuation">)</span>          String <span class="token function">getConsumes</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                  <span class="token keyword">return</span> <span class="token string">"Consumes attribute"</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在这段代码中，getProduces()处理方法会产生一个JSON响应，同理，getConsumes()方法可以同时处理请求中的JSON和XML内容。使用@RequestMapping来处理消息头@RequestMapping注解提供了一个header元素来根据请求中的消息头内容缩小请求映射的范围。在可以指定header元素的值，用myHeader = myValue 这样的格式：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@RestController</span>  <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/home"</span><span class="token punctuation">)</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">IndexController</span> <span class="token punctuation">{</span>          <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/head"</span><span class="token punctuation">,</span> headers <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"content-type=text/plain"</span><span class="token punctuation">}</span><span class="token punctuation">)</span>          String <span class="token function">post</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                  <span class="token keyword">return</span> <span class="token string">"Mapping applied along with headers"</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在上面这段代码中， @RequestMapping 注解的 headers 属性将映射范围缩小到了 post() 方法。有了这个，post() 方法就只会处理到 /home/head 并且 content-typeheader 被指定为 text/plain 这个值的请求。你也可以像下面这样指定多个消息头：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@RestController</span>  <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/home"</span><span class="token punctuation">)</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">IndexController</span> <span class="token punctuation">{</span>          <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/head"</span><span class="token punctuation">,</span> headers <span class="token operator">=</span> <span class="token punctuation">{</span>                  <span class="token string">"content-type=text/plain"</span><span class="token punctuation">,</span>                  <span class="token string">"content-type=text/html"</span>          <span class="token punctuation">}</span><span class="token punctuation">)</span>     String <span class="token function">post</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                  <span class="token keyword">return</span> <span class="token string">"Mapping applied along with headers"</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样， post() 方法就能同时接受 text/plain 还有 text/html 的请求了。</p><p><strong>使用 @RequestMapping 来处理请求参数</strong></p><p>@RequestMapping 直接的 params 元素可以进一步帮助我们缩小请求映射的定位范围。使用 params 元素，你可以让多个处理方法处理到同一个URL 的请求, 而这些请求的参数是不一样的。你可以用 myParams = myValue 这种格式来定义参数，也可以使用通配符来指定特定的参数值在请求中是不受支持的。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@RestController</span>  <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/home"</span><span class="token punctuation">)</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">IndexController</span> <span class="token punctuation">{</span>          <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/fetch"</span><span class="token punctuation">,</span> params <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"personId=10"</span><span class="token punctuation">}</span><span class="token punctuation">)</span>          String <span class="token function">getParams</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span><span class="token string">"personId"</span><span class="token punctuation">)</span> String id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"Fetched parameter = "</span> <span class="token operator">+</span> id<span class="token punctuation">;</span>          <span class="token punctuation">}</span>          <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/fetch"</span><span class="token punctuation">,</span> params <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"personId=20"</span><span class="token punctuation">}</span><span class="token punctuation">)</span>          String <span class="token function">getParamsDifferent</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span><span class="token string">"personId"</span><span class="token punctuation">)</span> String id<span class="token punctuation">)</span> <span class="token punctuation">{</span>                  <span class="token keyword">return</span> <span class="token string">"Fetched parameter = "</span> <span class="token operator">+</span> id<span class="token punctuation">;</span>          <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在这段代码中，getParams() 和 getParamsDifferent() 两个方法都能处理相同的一个 URL (/home/fetch) ，但是会根据 params 元素的配置不同而决定具体来执行哪一个方法。例如，当 URL 是 /home/fetch?id=10 的时候, getParams() 会执行，因为 id 的值是10,。对于 localhost:8080/home/fetch?personId=20 这个URL, getParamsDifferent() 处理方法会得到执行，因为 id 值是 20。</p><p><strong>使用 @RequestMapping 处理动态 URI</strong></p><p>@RequestMapping 注解可以同 @PathVaraible 注解一起使用，用来处理动态的 URI，URI 的值可以作为控制器中处理方法的参数。你也可以使用正则表达式来只处理可以匹配到正则表达式的动态 URI。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@RestController</span>  <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/home"</span><span class="token punctuation">)</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">IndexController</span> <span class="token punctuation">{</span>          <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/fetch/{id}"</span><span class="token punctuation">,</span> method <span class="token operator">=</span> RequestMethod<span class="token punctuation">.</span>GET<span class="token punctuation">)</span>      String <span class="token function">getDynamicUriValue</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span> String id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"ID is "</span> <span class="token operator">+</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>                 <span class="token keyword">return</span> <span class="token string">"Dynamic URI parameter fetched"</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>          <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"fetch/{id:[a-z]+}/{name}"</span><span class="token punctuation">,</span> method <span class="token operator">=</span> RequestMethod<span class="token punctuation">.</span>GET<span class="token punctuation">)</span>          String <span class="token function">getDynamicUriValueRegex</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span> String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>                  System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Name is "</span> <span class="token operator">+</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token keyword">return</span> <span class="token string">"Dynamic URI parameter fetched using regex"</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>  <span class="token punctuation">}</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在这段代码中，方法 getDynamicUriValue() 会在发起到 localhost:8080/home/fetch/10 的请求时执行。这里 getDynamicUriValue() 方法 id 参数也会动态地被填充为 10 这个值。方法 getDynamicUriValueRegex() 会在发起到 localhost:8080/home/fetch/category/shirt 的请求时执行。不过，如果发起的请求是 /home/fetch/10/shirt 的话，会抛出异常，因为这个URI并不能匹配正则表达式。@PathVariable 同 @RequestParam的运行方式不同。你使用 @PathVariable 是为了从 URI 里取到查询参数值。换言之，你使用 @RequestParam 是为了从 URI 模板中获取参数值。</p><p><strong>@RequestMapping 默认的处理方法</strong></p><p>在控制器类中，你可以有一个默认的处理方法，它可以在有一个向默认 URI 发起的请求时被执行。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@RestController</span>  <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/home"</span><span class="token punctuation">)</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">IndexController</span> <span class="token punctuation">{</span>          <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token punctuation">)</span>          String <span class="token keyword">default</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                  <span class="token keyword">return</span> <span class="token string">"This is a default method for the class"</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在这段代码中，向 /home 发起的一个请求将会由 default() 来处理，因为注解并没有指定任何值。</p><p><strong>@RequestMapping 快捷方式</strong></p><p>Spring 4.3 引入了方法级注解的变体，也被叫做 @RequestMapping 的组合注解。组合注解可以更好的表达被注解方法的语义。它们所扮演的角色就是针对 @RequestMapping 的封装，而且成了定义端点的标准方法。例如，@GetMapping 是一个组合注解，它所扮演的是 @RequestMapping(method =RequestMethod.GET) 的一个快捷方式。方法级别的注解变体有如下几个：@GetMapping@PostMapping@PutMapping@DeleteMapping@PatchMapping如下代码展示了如何使用组合注解：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@RestController</span> <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/home"</span><span class="token punctuation">)</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">IndexController</span> <span class="token punctuation">{</span>         <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/person"</span><span class="token punctuation">)</span>          <span class="token keyword">public</span> <span class="token annotation punctuation">@ResponseBody</span> ResponseEntity <span class="token operator">&lt;</span>String<span class="token operator">></span> <span class="token function">getPerson</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ResponseEntity</span> <span class="token operator">&lt;</span> String <span class="token operator">></span> <span class="token punctuation">(</span><span class="token string">"Response from GET"</span><span class="token punctuation">,</span> HttpStatus<span class="token punctuation">.</span>OK<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>          <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/person/{id}"</span><span class="token punctuation">)</span>          <span class="token keyword">public</span> <span class="token annotation punctuation">@ResponseBody</span> ResponseEntity <span class="token operator">&lt;</span> String <span class="token operator">></span> <span class="token function">getPersonById</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span> String id<span class="token punctuation">)</span> <span class="token punctuation">{</span>                 <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ResponseEntity</span> <span class="token operator">&lt;</span> String <span class="token operator">></span> <span class="token punctuation">(</span><span class="token string">"Response from GET with id "</span> <span class="token operator">+</span> id<span class="token punctuation">,</span> HttpStatus<span class="token punctuation">.</span>OK<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>          <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"/person"</span><span class="token punctuation">)</span>          <span class="token keyword">public</span> <span class="token annotation punctuation">@ResponseBody</span> ResponseEntity <span class="token operator">&lt;</span> String <span class="token operator">></span> <span class="token function">postPerson</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ResponseEntity</span> <span class="token operator">&lt;</span> String <span class="token operator">></span> <span class="token punctuation">(</span><span class="token string">"Response from POST method"</span><span class="token punctuation">,</span> HttpStatus<span class="token punctuation">.</span>OK<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>       <span class="token annotation punctuation">@PutMapping</span><span class="token punctuation">(</span><span class="token string">"/person"</span><span class="token punctuation">)</span>          <span class="token keyword">public</span> <span class="token annotation punctuation">@ResponseBody</span> ResponseEntity <span class="token operator">&lt;</span> String <span class="token operator">></span> <span class="token function">putPerson</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ResponseEntity</span> <span class="token operator">&lt;</span> String <span class="token operator">></span> <span class="token punctuation">(</span><span class="token string">"Response from PUT method"</span><span class="token punctuation">,</span> HttpStatus<span class="token punctuation">.</span>OK<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>    <span class="token annotation punctuation">@DeleteMapping</span><span class="token punctuation">(</span><span class="token string">"/person"</span><span class="token punctuation">)</span>          <span class="token keyword">public</span> <span class="token annotation punctuation">@ResponseBody</span> ResponseEntity <span class="token operator">&lt;</span> String <span class="token operator">></span> <span class="token function">deletePerson</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ResponseEntity</span> <span class="token operator">&lt;</span> String <span class="token operator">></span> <span class="token punctuation">(</span><span class="token string">"Response from DELETE method"</span><span class="token punctuation">,</span> HttpStatus<span class="token punctuation">.</span>OK<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>      <span class="token annotation punctuation">@PatchMapping</span><span class="token punctuation">(</span><span class="token string">"/person"</span><span class="token punctuation">)</span>          <span class="token keyword">public</span> <span class="token annotation punctuation">@ResponseBody</span> ResponseEntity <span class="token operator">&lt;</span> String <span class="token operator">></span> <span class="token function">patchPerson</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ResponseEntity</span> <span class="token operator">&lt;</span> String <span class="token operator">></span> <span class="token punctuation">(</span><span class="token string">"Response from PATCH method"</span><span class="token punctuation">,</span> HttpStatus<span class="token punctuation">.</span>OK<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在这段代码中，每一个处理方法都使用 @RequestMapping 的组合变体进行了注解。尽管每个变体都可以使用带有方法属性的 @RequestMapping 注解来互换实现, 但组合变体仍然是一种最佳的实践 — 这主要是因为组合注解减少了在应用程序上要配置的元数据，并且代码也更易读。</p>]]></content>
      
      
      <categories>
          
          <category> JAVA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring Boot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hadoop项目配置</title>
      <link href="2020/01/14/hadoop-xiang-mu-pei-zhi/"/>
      <url>2020/01/14/hadoop-xiang-mu-pei-zhi/</url>
      
        <content type="html"><![CDATA[<h2 id="1-查看Java安装路径"><a href="#1-查看Java安装路径" class="headerlink" title="1.查看Java安装路径"></a>1.查看Java安装路径</h2><pre><code>update-alternatives --display java&gt;&gt; /usr/lib/jvm/java-7-openjdk-amd64/jre/bin/java</code></pre><p>hadoop安装在以下位置: /usr/local/hadoop</p><h2 id="2-Hadoop-环境变量配置"><a href="#2-Hadoop-环境变量配置" class="headerlink" title="2.Hadoop 环境变量配置"></a>2.Hadoop 环境变量配置</h2><p>.bashrc配置 【~/.bashrc: 当前用户 /etc/profile: 所有用户 终端：仅当前终端窗口】</p><h3 id="HOME文件夹配置"><a href="#HOME文件夹配置" class="headerlink" title="HOME文件夹配置"></a>HOME文件夹配置</h3><pre><code>export JAVA_HOME=/usr/lib/jvm/java-7-openjdk-amd64export HADOOP_HOME=/usr/local/hadoop</code></pre><h3 id="具体环境配置"><a href="#具体环境配置" class="headerlink" title="具体环境配置"></a>具体环境配置</h3><pre><code>export PATH=$PATH:$HADOOP_HOME/bin  # 各项运行文件，包括Hadoop、HDFS、YARN等。export PATH=$PATH:$HADOOP_HOME/sbin  # shell运行文件export HADOOP_MAPRED_HOME=$HADOOP_HOME  # 单机版，所以MapReduce、HDFS、YARN等都在一个文件夹？export HADOOP_COMMON_HOME=$HADOOP_HOMEexport HADOOP_HDFS_HOME=$HADOOP_HOMEexport YARN_HOME=$HADOOP_HOMEexport HADOOP_COMMON_LIB_NATIVE_DIR=$HADOOP_HOME/lib/naitve  # 一些函数库配置export HADOOP_OPTS="-Djava.library.path=$HADOOP_HOME/lib"  # 指定非Java类包的位置export JAVA_LIBRARY_PATH=$HADOOP_HOME/lib/native:$JAVA_LIBRARY_PATH  # 动态链接库的位置</code></pre><h2 id="3-Hadoop配置设置文件"><a href="#3-Hadoop配置设置文件" class="headerlink" title="3.Hadoop配置设置文件"></a>3.Hadoop配置设置文件</h2><h3 id="Hadoop-env-sh"><a href="#Hadoop-env-sh" class="headerlink" title="Hadoop-env.sh"></a>Hadoop-env.sh</h3><pre><code>export JAVA_HOME=${JAVA_HOME} &gt;&gt;export JAVA_HOME=/usr/lib/jvm/java-7-openjdk-amd64</code></pre><h3 id="core-site-xml"><a href="#core-site-xml" class="headerlink" title="core-site.xml"></a>core-site.xml</h3><h4 id="设置HDFS的默认名称"><a href="#设置HDFS的默认名称" class="headerlink" title="设置HDFS的默认名称"></a>设置HDFS的默认名称</h4><pre><code>&lt;configuration&gt;&lt;property&gt;    &lt;name&gt;fs.default.name&lt;/name&gt;    &lt;value&gt;hdfs://localhost:9000&lt;/value&gt;&lt;/property&gt;&lt;/configuration&gt;</code></pre><h4 id="yarn-site-xml-MapReduce2-YARN-相关配置"><a href="#yarn-site-xml-MapReduce2-YARN-相关配置" class="headerlink" title="yarn-site.xml MapReduce2 (YARN)相关配置"></a>yarn-site.xml MapReduce2 (YARN)相关配置</h4><pre><code>&lt;property&gt;    &lt;name&gt;yarn.nodemanager.aux-services&lt;/name&gt;    &lt;value&gt;mapreduce_shuffle&lt;/value&gt;&lt;/property&gt;&lt;property&gt;    &lt;name&gt;yarn.nodemanager.aux-services.mapreduce.shuffle.class&lt;/name&gt;    &lt;value&gt;org.apache.hadoop.mapred.ShuffleHandler&lt;/value&gt;&lt;/property&gt;</code></pre><h3 id="mapred-site-xml"><a href="#mapred-site-xml" class="headerlink" title="mapred-site.xml"></a>mapred-site.xml</h3><pre><code>&lt;configuration&gt;&lt;property&gt;    &lt;name&gt;mapreduce.framework.name&lt;/name&gt;    &lt;value&gt;yarn&lt;/value&gt;&lt;/property&gt;&lt;/configuration&gt;</code></pre><h3 id="hdfs-site-xml"><a href="#hdfs-site-xml" class="headerlink" title="hdfs-site.xml"></a>hdfs-site.xml</h3><pre><code>&lt;property&gt;    &lt;name&gt;dfs.replication&lt;/name&gt;  # blocks副本备份数量    &lt;value&gt;3&lt;/value&gt;&lt;/property&gt;&lt;property&gt;    &lt;name&gt;dfs.namenode.name.dir&lt;/name&gt;  # NameNode数据存储目录    &lt;value&gt;file:/usr/local/hadoop/hadoop_data/hdfs/namenode&lt;/value&gt;&lt;/property&gt;&lt;property&gt;    &lt;name&gt;dfs.datanode.data.dir&lt;/name&gt;  # DataNode数据存储    &lt;value&gt;file:/usr/local/hadoop/hadoop_data/hdfs/datanode&lt;/value&gt;&lt;/property&gt;</code></pre><h2 id="4-创建并格式化HDFS目录"><a href="#4-创建并格式化HDFS目录" class="headerlink" title="4.创建并格式化HDFS目录"></a>4.创建并格式化HDFS目录</h2><h3 id="创建NameNode数据存储目录"><a href="#创建NameNode数据存储目录" class="headerlink" title="创建NameNode数据存储目录"></a>创建NameNode数据存储目录</h3><h3 id="创建DataNode数据存储目录"><a href="#创建DataNode数据存储目录" class="headerlink" title="创建DataNode数据存储目录"></a>创建DataNode数据存储目录</h3><h3 id="将Hadoop目录所有者更改为hduser"><a href="#将Hadoop目录所有者更改为hduser" class="headerlink" title="将Hadoop目录所有者更改为hduser"></a>将Hadoop目录所有者更改为hduser</h3><pre><code>chown hduser:hduser -R /usr/local/hadoop</code></pre><h2 id="5-data1服务器-ip设置"><a href="#5-data1服务器-ip设置" class="headerlink" title="5.data1服务器 ip设置"></a>5.data1服务器 ip设置</h2><pre><code>vi /etc/network/interfaces# NAT interfaceauto eth0iface eth0 inet dhcp# host only interfaceiface eth1 inet staticaddress    192.168.56.101netmask    255.255.255.0network    192.168.56.0    broadcast    192.168.56.255</code></pre><h3 id="更改hostname"><a href="#更改hostname" class="headerlink" title="更改hostname"></a>更改hostname</h3><pre><code>/etc/hostnamedata1</code></pre><h3 id="编辑host文件"><a href="#编辑host文件" class="headerlink" title="编辑host文件"></a>编辑host文件</h3><pre><code>/etc/hosts192.168.56.100    master192.168.56.101    data1192.168.56.102    data2192.168.56.103    data3</code></pre><h3 id="core-site-xml-1"><a href="#core-site-xml-1" class="headerlink" title="core-site.xml"></a>core-site.xml</h3><p>localhost改为master</p><h3 id="yarn-site-xml"><a href="#yarn-site-xml" class="headerlink" title="yarn-site.xml"></a>yarn-site.xml</h3><pre><code>&lt;property&gt;    &lt;name&gt;yarn.resourcemanager.resource-tracker.address&lt;/name&gt;    &lt;value&gt;master:8025&lt;/value&gt;&lt;/property&gt;&lt;property&gt;    &lt;name&gt;yarn.resourcemanager.scheduler.address&lt;/name&gt;    &lt;value&gt;master:8030&lt;/value&gt;&lt;/property&gt;&lt;property&gt;    &lt;name&gt;yarn.resourcemanager.address&lt;/name&gt;    &lt;value&gt;master:8050&lt;/value&gt;&lt;/property&gt;</code></pre><h3 id="mapred-site-xml-1"><a href="#mapred-site-xml-1" class="headerlink" title="mapred-site.xml"></a>mapred-site.xml</h3><pre><code>&lt;property&gt;    &lt;name&gt;mapred.job.tracker&lt;/name&gt;    &lt;value&gt;master:54311&lt;/value&gt;&lt;/property&gt;</code></pre><h3 id="hdfs-site-xml-1"><a href="#hdfs-site-xml-1" class="headerlink" title="hdfs-site.xml"></a>hdfs-site.xml</h3><p>删除namenode配置，保留DataNode配置</p><pre><code>&lt;property&gt;    &lt;name&gt;dfs.datanode.data.dir&lt;/name&gt;  # DataNode数据存储    &lt;value&gt;file:/usr/local/hadoop/hadoop_data/hdfs/datanode&lt;/value&gt;&lt;/property&gt;</code></pre><p>ifconfig 确认两个网卡,内网ip是192.168.56.101。对外网络连接正常</p><p>复制data1服务器到data2、data3,更改以上必要设置</p><h2 id="6-master服务器-ip设置、hostname设置"><a href="#6-master服务器-ip设置、hostname设置" class="headerlink" title="6.master服务器 ip设置、hostname设置"></a>6.master服务器 ip设置、hostname设置</h2><h3 id="hdfs-site-xml-2"><a href="#hdfs-site-xml-2" class="headerlink" title="hdfs-site.xml"></a>hdfs-site.xml</h3><p>删除DataNode配置，保留NameNode配置</p><pre><code>&lt;property&gt;    &lt;name&gt;dfs.namenode.name.dir&lt;/name&gt;  # NameNode数据存储目录    &lt;value&gt;file:/usr/local/hadoop/hadoop_data/hdfs/namenode&lt;/value&gt;&lt;/property&gt;</code></pre><h3 id="编辑master文件"><a href="#编辑master文件" class="headerlink" title="编辑master文件"></a>编辑master文件</h3><pre><code>/usr/local/hadoop/etc/hadoop/masters</code></pre><h3 id="编辑slaves文件"><a href="#编辑slaves文件" class="headerlink" title="编辑slaves文件"></a>编辑slaves文件</h3><pre><code>/usr/local/hadoop/etc/hadoop/slaves</code></pre>]]></content>
      
      
      <categories>
          
          <category> BigData </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hadoop </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
